<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>My Tasks</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            dark: {
              'bg': '#1B1E26',
              'sidebar': '#22252D',
              'hover': '#2A2E37',
              'border': '#363B46'
            }
          },
          fontFamily: {
            sans: ['Inter', 'sans-serif'],
          },
        },
      },
    }
  </script>
  <style>
    body {
      background-color: #1B1E26;
      color: #fff;
    }
    .sidebar-item {
      padding: 8px 16px;
      border-radius: 6px;
      margin: 2px 0;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 12px;
    }
    .sidebar-item:hover {
      background-color: #2A2E37;
    }
    .sidebar-item.active {
      background-color: #2A2E37;
    }
    .task-item {
      padding: 8px 16px;
      border-radius: 6px;
      margin: 2px 0;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 12px;
      position: relative;
    }
    .task-item:hover {
      background-color: #2A2E37;
    }
    .task-item:hover .delete-btn {
      opacity: 1;
    }
    .delete-btn {
      position: absolute;
      right: 16px;
      opacity: 0;
      transition: opacity 0.2s ease;
      color: #6B7280;
    }
    .delete-btn:hover {
      color: #EF4444;
    }
    .checkbox {
      width: 20px;
      height: 20px;
      border: 2px solid #363B46;
      border-radius: 50%;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .checkbox.checked {
      background-color: #3B82F6;
      border-color: #3B82F6;
    }
    .task-details {
      padding: 32px;
      background-color: #22252D;
      border-radius: 16px;
      min-height: 600px; 
      min-width: 500px;
      font-size: 1.1rem;
    }
    
    .subtask-add {
      display: flex;
      align-items: center;
      gap: 12px;
      padding: 8px;
      border-radius: 6px;
      cursor: pointer;
    }
    .subtask-add:hover {
      background-color: #2A2E37;
    }
    .blurred-panel {
      filter: blur(1px);
      pointer-events: none;
      opacity: 0.4;
      transition: all 0.3s ease;
    }
    .blurred-panel #task-blur-content {
      filter: blur(3px);
      pointer-events: none;
      opacity: 0.6;
      transition: all 0.3s ease;
    }
    .completed-button {
      background-color: #22c55e; /* Tailwind's green-500 */
      cursor: default;
      pointer-events: none;
      transition: background-color 0.3s ease, transform 0.2s ease;
    }
    .completed-button:hover {
      background-color: #16a34a; /* green-600 */
      transform: scale(1.02);
    }
    
    
  </style>
</head>
<body class="h-screen flex">
 <!-- Sidebar -->
<div class="w-64 bg-dark-sidebar border-r border-dark-border p-4 flex flex-col">
  <!-- User Profile -->
  <div class="flex items-center gap-3 mb-6 px-2">
    <div class="w-8 h-8 rounded-full bg-blue-500 flex items-center justify-center">
      <span class="text-sm font-semibold"><%= user.email[0].toUpperCase() %></span>
    </div>
    <span class="font-medium truncate"><%= user.email.split('@')[0] %></span>
  </div>

  <!-- Quick Actions -->
  <div class="flex items-center gap-2 mb-6 px-3 text-lg">
    <button class="flex items-center gap-2 w-full py-2 px-4 rounded-lg text-blue-500 transition-colors">
      <i class="fas fa-bars text-blue-500"></i>
      <span>My Tasks</span>
    </button>
  </div>
  

  <!-- Lists -->
  <div class="space-y-1">
    <div class="mt-4 mb-2">
      <div class="text-sm text-gray-400 px-4 mb-2">My lists</div>
      <div class="sidebar-item" onclick="filterTasks('personal')">
        <i class="fas fa-user text-gray-400"></i>
        <span class="flex justify-between w-full">
          Personal
          <span class="ml-auto text-sm text-gray-400" id="count-personal"></span>
        </span>
      </div>
      <div class="sidebar-item" onclick="filterTasks('work')">
        <i class="fas fa-briefcase text-gray-400"></i>
        <span class="flex justify-between w-full">
          Work
          <span class="ml-auto text-sm text-gray-400" id="count-work"></span>
        </span>
      </div>
      <div class="sidebar-item" onclick="filterTasks('grocery')">
        <i class="fas fa-shopping-cart text-gray-400"></i>
        <span class="flex justify-between w-full">
          Grocery List
          <span class="ml-auto text-sm text-gray-400" id="count-grocery"></span>
        </span>
      </div>
      
    </div>
  </div>
</div>

  <!-- Main Content -->
  <div class="flex-1 flex">
    <!-- Tasks List -->
    <div class="w-96 border-r border-dark-border p-4">
      <h1 class="text-xl font-bold mb-4">All my tasks</h1>
      
      <!-- Add Task Button -->
      <div class="mb-4">
        <form id="addTaskForm" class="flex gap-2">
          <input 
            type="text" 
            name="title" 
            id="newTaskInput"
            placeholder="Add a task..."
            class="flex-1 bg-dark-hover text-white px-4 py-2 rounded-lg border border-dark-border focus:outline-none focus:border-blue-500"
          >
          <button type="submit" class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">
            Add
          </button>
        </form>
      </div>

      
     <!-- Tasks -->
<div id="taskList" class="space-y-1">

        <% tasks.forEach(task => { %>
        <div class="task-item" data-task-id="<%= task._id %>">
          <div class="checkbox <%= task.completed ? 'checked' : '' %>">
            <% if (task.completed) { %>
              <i class="fas fa-check text-white text-xs"></i>
            <% } %>
            
          </div>
          <span class="<%= task.completed ? 'line-through text-gray-500' : '' %>"><%= task.title %></span>
          <button class="delete-btn" onclick="deleteTask(event, '<%= task._id %>')">
            <i class="fas fa-times"></i>
          </button>
          
        </div>
        <% }) %>
        
      </div>
    </div>

    

    <!-- Task Details -->
    <div id="right-panel" class="bg-dark-secondary text-white p-6 rounded-lg h-full overflow-auto">
      <!-- This stays visible -->
      <div class="flex items-center justify-between mb-6">
        <div>
          <h2 class="text-2xl font-bold mb-1">Selected Task</h2>
          <div class="text-sm text-gray-400">Personal</div>
        </div>
        <button 
           id="complete-btn"
           class="bg-blue-500 hover:bg-blue-600 text-white text-sm font-medium px-4 py-2 rounded transition"
          onclick="markSelectedTaskComplete()"
        >
          Mark as Complete
        </button>
      </div>
    
      <!-- ðŸ”¥ Blurred box-style container -->
      <div id="task-blur-content" class="transition duration-300">
        <div class="bg-dark p-4 rounded-lg border border-dark-border space-y-6">
          <!-- NOTES -->
          <div>
            <h3 class="text-sm text-gray-400 mb-2">NOTES</h3>
            <textarea 
              placeholder="Insert your notes here"
              class="w-full bg-transparent text-white placeholder-gray-600 focus:outline-none border border-gray-600 rounded p-2"
              rows="3"
            ></textarea>
          </div>
    
          <!-- SUBTASKS -->
          <div>
            <h3 class="text-sm text-gray-400 mb-2">SUBTASKS</h3>
            <div class="space-y-2">
              <div class="subtask-add text-gray-400 cursor-pointer flex items-center gap-2">
                <i class="fas fa-plus"></i>
                <span>Add a new subtask</span>
              </div>
            </div>
          </div>
    
          <!-- ATTACHMENTS -->
          <div>
            <h3 class="text-sm text-gray-400 mb-2">ATTACHMENTS</h3>
            <div class="border-2 border-dashed border-dark-border rounded-lg p-8 text-center text-gray-400">
              Click to add / drop your files here
            </div>
          </div>
        </div>
      </div>
    </div>
    
  <script>

    // Load all tasks
    async function loadAllTasks() {
      try {
        const response = await fetch('/todos/all');
        const tasks = await response.json();
        
        // Clear existing tasks
        const tasksList = document.getElementById('taskList');

        tasksList.innerHTML = '';
        
        // Add all tasks
        tasks.forEach(task => {
          const taskElement = createTaskElement(task);
          tasksList.appendChild(taskElement);
        });

        // Update task count
        document.getElementById('allTasksCount').textContent = tasks.length;
        
        // Update active state
        document.querySelectorAll('.sidebar-item').forEach(item => {
          item.classList.remove('active');
        });
        document.querySelector('.sidebar-item').classList.add('active');
      } catch (error) {
        console.error('Error loading tasks:', error);
      }
    }

    // Delete task
    function deleteTask(e, taskId) {
      e.stopPropagation();
      e.preventDefault();
      
      fetch(`/todos/${taskId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json'
        }
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(data => {
        if (data.success) {
          const taskElement = document.querySelector(`[data-task-id="${taskId}"]`);
          if (taskElement) {
            taskElement.remove();
            // Update task count
            const countElement = document.getElementById('allTasksCount');
            const currentCount = parseInt(countElement.textContent);
            countElement.textContent = currentCount - 1;
          }
        } else {
          console.error('Failed to delete task:', data.msg);
        }
      })
      .catch(error => {
        console.error('Error deleting task:', error);
      });
    }

    // Create task element function
    function createTaskElement(task) {
      const taskElement = document.createElement('div');
      taskElement.className = 'task-item group flex items-center p-2 bg-dark rounded mb-2'; // Flex container
      taskElement.dataset.taskId = task._id;
    
      taskElement.innerHTML = `
        <!-- Checkbox -->
        <div class="checkbox ${task.completed ? 'checked' : ''} w-5 h-5 flex items-center justify-center mr-3 cursor-pointer border border-gray-500 rounded">
          ${task.completed ? '<i class="fas fa-check text-white text-xs"></i>' : ''}
        </div>
    
        <!-- Task title -->
        <span class="flex-grow ${task.completed ? 'line-through text-gray-500' : ''}">${task.title}</span>
    
        <!-- Action buttons -->
        <div class="relative hidden group-hover:flex items-center gap-2 ml-3">
          <!-- Three-dot menu -->
          <div class="relative">
            <button class="text-gray-400 hover:text-white" onclick="toggleMoveMenu(event, '${task._id}')">
              <i class="fas fa-ellipsis-v"></i>
            </button>
            <div id="move-menu-${task._id}" class="absolute right-0 mt-2 w-32 bg-dark-hover rounded shadow-lg hidden z-50">
              <div onclick="moveTask('${task._id}', 'personal')" class="px-4 py-2 hover:bg-dark-border cursor-pointer">Personal</div>
              <div onclick="moveTask('${task._id}', 'work')" class="px-4 py-2 hover:bg-dark-border cursor-pointer">Work</div>
              <div onclick="moveTask('${task._id}', 'grocery')" class="px-4 py-2 hover:bg-dark-border cursor-pointer">Grocery</div>
            </div>
          </div>
    
          <!-- Delete button -->
          <button class="text-red-400 hover:text-red-600" onclick="deleteTask(event, '${task._id}')">
            <i class="fas fa-times"></i>
          </button>
        </div>
      `;
    
      // Checkbox click listener
      const checkbox = taskElement.querySelector('.checkbox');
      checkbox.addEventListener('click', (e) => {
        e.stopPropagation();
        checkbox.classList.toggle('checked');
      
        const taskText = taskElement.querySelector('span');
        taskText.classList.toggle('line-through');
        taskText.classList.toggle('text-gray-500');
      
        const existingIcon = checkbox.querySelector('.fa-check');
        if (checkbox.classList.contains('checked')) {
          if (!existingIcon) {
            const checkIcon = document.createElement('i');
            checkIcon.className = 'fas fa-check text-white text-xs';
            checkbox.appendChild(checkIcon);
          }
        } else {
          if (existingIcon) existingIcon.remove();
        }
      
        // ðŸ”½ ADD THIS LOGIC HERE ðŸ”½
        const blurContent = document.getElementById('task-blur-content');
        if (checkbox.classList.contains('checked')) {
          blurContent.classList.add('blurred-panel');
        } else {
          blurContent.classList.remove('blurred-panel');
        }
        
      
        // Send update to server
        fetch(`/todos/${task._id}/toggle`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' }
        });
      });

      taskElement.addEventListener('click', () => {
        window.currentTaskId = task._id;
      
        // Optional: Unblur if previously blurred
        const blurContent = document.getElementById('task-blur-content');
        blurContent.classList.remove('blurred-panel');
      });
      
      
    
      return taskElement;
    }
    
    // Load tasks on page load
    document.addEventListener('DOMContentLoaded', () => {
      loadAllTasks();
    });

    // Add new task
    document.getElementById('addTaskForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const input = document.getElementById('newTaskInput');
      const title = input.value.trim();
      
      if (!title) return;

      try {
        const response = await fetch('/todos', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ title })
        });

        const task = await response.json();
        
        // After adding a new task, reload all tasks to ensure consistency
        loadAllTasks();
        
        // Clear input
        input.value = '';
      } catch (error) {
        console.error('Error adding task:', error);
      }
    });

    function toggleMoveMenu(event, taskId) {
      event.stopPropagation();
      const menu = document.getElementById(`move-menu-${taskId}`);
      const isVisible = !menu.classList.contains('hidden');
      
      // Close all other menus first
      document.querySelectorAll('[id^="move-menu-"]').forEach(m => {
        m.classList.add('hidden');
      });
    
      if (!isVisible) {
        menu.classList.remove('hidden');
      }
    }

    
    
    // Optional: Hide the menu when clicking anywhere else
    document.addEventListener('click', () => {
      document.querySelectorAll('[id^="move-menu-"]').forEach(m => m.classList.add('hidden'));
    });
    function markSelectedTaskComplete() {
     
      const rightPanel = document.getElementById('right-panel');
      const button = document.getElementById('complete-btn');
       // Blur the content
  rightPanel.classList.add('blurred-panel');
  
    // Update the button text and style
    button.textContent = 'âœ“ Completed';
    button.classList.remove('bg-blue-500', 'hover:bg-blue-600');
    button.classList.add('completed');

  const selectedTaskId = window.currentTaskId;
    
      if (!selectedTaskId) return;
    
      fetch(`/todos/${selectedTaskId}/toggle`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        }
      })
      .then(() => {
        loadAllTasks();
        const blurContent = document.getElementById('task-blur-content');
        blurContent.classList.add('blurred-panel');
      })
      .catch(err => console.error('Error marking task complete:', err));
    }
    
    
    
    
  </script>
  
</body>
</html> 